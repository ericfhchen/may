<div class="product-template" data-section-id="{{ section.id }}" data-section-type="product-template">
  <div class="product">
    <div class="product__info">
      {% if product.description != blank %}
        <div class="product__description rte">
          {{ product.description }}
        </div>
      {% endif %}
      
      <div class="product__details">
        <h1 class="product__title">{{ product.title }}</h1>
        
        <div class="product__price">
          {% if product.compare_at_price_max > product.price %}
            <span class="product__price--sale">{{ product.price | money }}</span>
            <s class="product__price--compare">{{ product.compare_at_price | money }}</s>
          {% else %}
            <span class="product__price--regular">{{ product.price | money }}</span>
          {% endif %}
        </div>
        
        {% form 'product', product, class: 'product-form', id: 'ProductForm' %}
          {% unless product.has_only_default_variant %}
            <div class="product-form__variants">
              {% for option in product.options_with_values %}
                <div class="product-form__option">
                  <select
                    id="Option{{ option.position }}"
                    class="product-form__option-select"
                    name="options[{{ option.name }}]"
                  >
                    {% for value in option.values %}
                      <option
                        value="{{ value }}"
                        {% if option.selected_value == value %}selected="selected"{% endif %}
                      >
                        {{ value }}
                      </option>
                    {% endfor %}
                  </select>
                </div>
              {% endfor %}
            </div>
          {% endunless %}
          
          <button
            type="submit"
            name="add"
            class="btn product-form__add-to-cart"
            {% unless product.available %}disabled="disabled"{% endunless %}
          >
            {% if product.available %}
              {{ 'products.product.add_to_cart' | t }}
            {% else %}
              {{ 'products.product.sold_out' | t }}
            {% endif %}
          </button>
          
          <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
          <input type="hidden" name="quantity" value="1">
        {% endform %}
      </div>
    </div>
    
    <div class="product__media">
      {% if product.media.size > 0 %}
        <div class="product-gallery" id="ProductGallery" data-total-slides="{{ product.media.size }}">
          <div class="product-gallery__main">
            {% for media in product.media %}
              <div class="gallery-slide{% if forloop.first %} active{% endif %}" data-slide-index="{{ forloop.index0 }}">
                <img
                  src="{{ media | img_url: '800x800', crop: 'center' }}"
                  alt="{{ media.alt | escape }}"
                  class="gallery-image"
                >
              </div>
            {% endfor %}
          </div>
          <div class="gallery-nav-overlay">
            <div class="gallery-nav-left" data-action="prev"></div>
            <div class="gallery-nav-right" data-action="next"></div>
          </div>
        </div>
      {% else %}
        <div class="product-gallery">
          <div class="product-gallery__main">
            {{ 'product-1' | placeholder_svg_tag: 'placeholder-svg' }}
          </div>
        </div>
      {% endif %}
    </div>
  </div>
</div>

<style>
  .product-template {
    height: 100vh;
    width: 100%;
    overflow: hidden;
    position: relative;
  }
  
  .product {
    display: flex;
    justify-content: space-between;
    height: 100svh; /* Small viewport height unit */
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    align-items: end;
  }
  
  .product__info {
    width: 40%;
    padding: 0;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
  }
  
  .product__description {
    padding: 0 0 0 0.5rem;
    margin-bottom: 2rem;
    max-height: calc(100vh - 150px);
    overflow-y: auto;
    font-size: 0.75rem;
    width: 60%;
  }
  
  .product__details {
    display: flex;
    align-items: stretch;
    justify-content: flex-start;
    text-transform: uppercase;
  }
  
  .product__title {
    margin: 0;
    font-size: 1.3rem !important;
    background-color: var(--product-highlight-color);
    color: #fff;
    padding: 0px 2px;
    display: flex;
    align-items: center;
  }
  
  .product__price {
    text-align: right;
    font-size: 1.3rem !important;
    background-color: var(--product-price-highlight-color);
    color: #fff;
    padding: 0 2px;
    display: flex;
    align-items: center;
  }
  
  .product-form {
    display: flex;
  }
  
  .product-form__variants {
    margin-right: 0.5rem;
  }
  
  .product-form__option-select {
    height: 100%;
  }
  
  .product-form__add-to-cart {
    height: 100%;
    white-space: nowrap;
    font-size: 1.3rem !important;
    font-family: 'May Grotesk', sans-serif;
    text-transform: uppercase;
    padding: 0;
    background: #0CBD09;
    border-radius: 0;
    padding: 0 2px;
    display: inline-block;
  }

  .product-form__add-to-cart:hover {
    background: var(--green-hover);
  }
  
  /* Square aspect ratio media section */
  .product__media {
    position: relative;
    height: 100%;
    aspect-ratio: 1 / 1;
  }
  
  /* Fallback for browsers that don't support aspect-ratio */
  @supports not (aspect-ratio: 1 / 1) {
    .product__media {
      width: auto;
      height: 100vh;
    }
    
    .product__media::before {
      content: '';
      display: block;
      width: 100vh; /* Make width equal to height for square */
    }
  }
  
  .product-gallery {
    width: 100%;
    height: 100%;
    position: relative;
  }
  
  .product-gallery__main {
    width: 100%;
    height: 100%;
    position: relative;
  }
  
  .gallery-slide {
    display: none;
    width: 100%;
    height: 100%;
  }
  
  .gallery-slide.active {
    display: block;
  }
  
  .gallery-image {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }
  
  .gallery-nav-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
  }
  
  .gallery-nav-left,
  .gallery-nav-right {
    width: 50%;
    height: 100%;
    cursor: pointer;
    z-index: 10;
  }
  
  /* Media queries to maintain aspect ratio */
  @media (max-aspect-ratio: 1/1) {
    .product {
      flex-direction: column-reverse;
    }
    
    .product__info {
      width: 100%;
      height: auto;
      padding-bottom: 0;
    }
    
    .product__media {
      width: 100vw;
      height: auto;
      aspect-ratio: 1 / 1;
    }
  }

  @media screen and (max-width: 1440px) {
    .product__media {
      height: 90%;
    }
  }

  @media screen and (max-width: 1280px) {
  .product__media {
    height: 75%;
  }  
  
  .product__details {
      display: flex;
      flex-wrap: wrap;
      align-items: stretch;
      justify-content: start;
      width: 100%;
    }  
  .product__title {
      font-size: 1rem !important;
    }

    .product__price {
      font-size: 1rem !important;
    }

    .product-form__add-to-cart {
      font-size: 1rem !important;
    }
  }

  @media screen and (max-width: 1024px) {
  .product__media {
    height: 75%;
  }
  .product__info {
    padding-right: 0.5rem;
  }    
  
  .product__description {
        width: 100%;
      }
    
    .product__details {
      display: flex;
      flex-wrap: wrap;
      align-items: stretch;
      justify-content: start;
      width: 100%;
    }
    
  }

  @media screen and (max-width: 768px) {
    .product__description {
      width: 90%;
      height: auto;
      padding-bottom: 0;
    }

    .product__title {
      font-size: 0.85rem !important;
    }

    .product__price {
      font-size: 0.85rem !important;
    }

    .product-form__add-to-cart {

      font-size: 0.85rem !important;

    }

  }

  @media screen and (max-width: 480px) {
    .product-template {
      height: -webkit-fill-available; /* Better handling for Safari */
      height: 100vh;
      height: calc(var(--vh, 1vh) * 100); /* Custom viewport height */
    }
    
    .product {
      height: -webkit-fill-available; /* Better handling for Safari */ 
      min-height: -webkit-fill-available;
      height: 100%;
      height: calc(var(--vh, 1vh) * 100); /* Custom viewport height */
      position: relative; /* Change from absolute to relative */
      flex-direction: column-reverse;
      padding-bottom: env(safe-area-inset-bottom, 0px); /* Account for notches */
      margin-bottom: 0; /* Ensure no extra margin */
      padding-top: 3.5rem; /* Account for fixed header */
    }
    
    .product__media {
      width: 100%;
      height: auto;
      aspect-ratio: 1 / 1; /* Modern browsers */
      max-height: 65vh !important; /* Limit height to ensure room for info section */
    }
    
    /* Fallback for browsers that don't support aspect-ratio */
    @supports not (aspect-ratio: 1 / 1) {
      .product__media {
        height: 0;
        padding-bottom: 100%; /* Creates a 1:1 aspect ratio */
        overflow: hidden;
        max-height: 65vh !important;
      }
    }
    
    .gallery-image {
      width: 100%;
      height: 100%;
      object-fit: contain;
      object-position: center;
    }
    
    .product__info {
      width: 100%;
      padding: 0.5rem;
      padding-bottom: calc(0.5rem + env(safe-area-inset-bottom, 20px)); /* Add extra padding for browser bar */
    }
    
    .product__description {
      margin-bottom: 0.5rem;
      max-height: 25vh;
      width: 100%;
      overflow-y: auto;
      -webkit-overflow-scrolling: touch; /* Smooth scrolling for iOS */
    }
  }

</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Fix for mobile viewport height in Safari
    function setMobileHeight() {
      // Only apply on mobile
      if (window.innerWidth <= 480) {
        // Get the viewport height
        const vh = window.innerHeight * 0.01;
        // Set the custom property
        document.documentElement.style.setProperty('--vh', `${vh}px`);
      }
    }
    
    // Set on load
    setMobileHeight();
    
    // Update on resize and orientation change
    window.addEventListener('resize', setMobileHeight);
    window.addEventListener('orientationchange', setMobileHeight);
    
    // Gallery functionality
    const gallery = document.getElementById('ProductGallery');
    if (gallery) {
      const slides = gallery.querySelectorAll('.gallery-slide');
      const totalSlides = parseInt(gallery.dataset.totalSlides, 10);
      let currentSlide = 0;
      
      function showSlide(index) {
        slides.forEach(slide => slide.classList.remove('active'));
        slides[index].classList.add('active');
      }
      
      gallery.querySelector('.gallery-nav-left').addEventListener('click', function(e) {
        e.preventDefault();
        currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
        showSlide(currentSlide);
      });
      
      gallery.querySelector('.gallery-nav-right').addEventListener('click', function(e) {
        e.preventDefault();
        currentSlide = (currentSlide + 1) % totalSlides;
        showSlide(currentSlide);
      });
    }

    // Ajax Add to Cart functionality
    const productForm = document.getElementById('ProductForm');
    if (productForm) {
      productForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(productForm);
        
        fetch('/cart/add.js', {
          method: 'POST',
          body: formData
        })
        .then(response => response.json())
        .then(item => {
          // Find the cart toggle button and click it to open the modal
          const cartToggle = document.querySelector('.cart-toggle');
          if (cartToggle) {
            cartToggle.click();
          }
          
          // Update cart item count if needed
          fetch('/cart.js')
            .then(response => response.json())
            .then(cart => {
              // If there's a count element, update it
              const countElement = document.querySelector('.cart-toggle__count');
              if (countElement) {
                countElement.textContent = cart.item_count;
              }
            })
            .catch(error => console.error('Error updating cart count:', error));
        })
        .catch(error => {
          console.error('Error adding to cart:', error);
        });
      });
    }
  });
</script>

{% schema %}
{
  "name": "Product",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "Show vendor",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_sku",
      "label": "Show SKU",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_share_buttons",
      "label": "Show social sharing buttons",
      "default": true
    }
  ]
}
{% endschema %} 